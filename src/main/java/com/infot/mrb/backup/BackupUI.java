package com.infot.mrb.backup;

import com.infot.mrb.database.DBConnection;
import com.infot.mrb.mail.MailSender;
import com.infot.mrb.utilities.Bitacora;
import com.infot.mrb.utilities.Props;
import com.infot.mrb.utilities.Ut;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.table.DefaultTableModel;

/**
 * Backup and restore MySQL databases using pure Java. This application was
 * tested with MySQL 8.0.29 and MariaDB 11.0.2
 *
 * @author Bosco Garita Azofeifa
 * @since Setp, 2023
 */
public class BackupUI extends javax.swing.JFrame {

    private Boolean backupInProgress;
    private Boolean restoreInProgress;
    private List<ConnectionRecord> connectionRecords;

    private boolean standalone;
    private final Bitacora log = new Bitacora();
    private int backupLife; // In days

    /**
     * Creates new form
     *
     * @param standalone
     */
    public BackupUI(boolean standalone) {
        initComponents();
        this.standalone = standalone;

        // DEBUG:
        //this.standalone = true;
        // END DEBUG
        this.backupInProgress = false;
        this.restoreInProgress = false;

        // Populate the connectionRecords list with all configured database connections.
        loadConnectionRecords();

        // Set the user and password fields with the right information
        // according to the selected server (from the combo box).
        // If combo is null initialize it.
        setUser();

        // Add a Window Listener to validate process status before closing.
        addWindowListener(
                new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                validateAndClose();
            }
        }
        );

        // Populate the database combo acconding to the selected server.
        loadDatabaseNames();

        setBackupLife();

        // Delete expired backups
        deleteExpiredBackups();

        // Populate the JTable with backup/restore data records.
        loadData();

        // Set default backup description with selected server + database + today's date.
        setDefaultDescription();

        // If MrB is working in standalone mode then start doing the work
        if (standalone) {
            doAll();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        jLabel12 = new javax.swing.JLabel();
        cboServer = new javax.swing.JComboBox<>();
        btnAddServer = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        btnBackup = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtBackupDescription = new javax.swing.JTextField();
        chkCompress = new javax.swing.JCheckBox();
        chkEncrypt = new javax.swing.JCheckBox();
        cboBD = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtNewDB = new javax.swing.JTextField();
        chkOverrideDatabase = new javax.swing.JCheckBox();
        btnRestore = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDB = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        txtDBId = new javax.swing.JTextField();
        txtZipFile = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtRestoredBy = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtRestoredTo = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtRestoredAs = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtOriginalDatabase = new javax.swing.JTextField();
        btnRestoreFrom = new javax.swing.JButton();
        ProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("MySQL/MariaDB backup & restore");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Database Authentication", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(51, 51, 255))); // NOI18N

        jLabel1.setText("User");

        jLabel2.setText("Password");

        txtPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPasswordFocusGained(evt);
            }
        });

        jLabel12.setText("Server");

        cboServer.setToolTipText("Select a server");
        cboServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboServerActionPerformed(evt);
            }
        });

        btnAddServer.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAddServer.setText("Add..");
        btnAddServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cboServer, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddServer))
                    .addComponent(txtUser)
                    .addComponent(txtPassword))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(btnAddServer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTabbedPane1.setForeground(new java.awt.Color(51, 51, 255));

        btnBackup.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBackup.setText("Run");
        btnBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackupActionPerformed(evt);
            }
        });

        jLabel4.setText("Description:");

        chkCompress.setSelected(true);
        chkCompress.setText("Compress data");
        chkCompress.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkCompressMouseClicked(evt);
            }
        });

        chkEncrypt.setText("Encrypt data");

        cboBD.setToolTipText("Select a database");
        cboBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboBDActionPerformed(evt);
            }
        });

        jLabel10.setText("Database");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 733, Short.MAX_VALUE)
                        .addComponent(btnBackup))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboBD, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtBackupDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkCompress)
                            .addComponent(chkEncrypt))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboBD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtBackupDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkCompress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkEncrypt)
                .addGap(100, 100, 100)
                .addComponent(btnBackup)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Backup", jPanel3);

        jLabel3.setText("Restore to");

        txtNewDB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNewDBFocusGained(evt);
            }
        });
        txtNewDB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNewDBKeyTyped(evt);
            }
        });

        chkOverrideDatabase.setText("Override original database");
        chkOverrideDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkOverrideDatabaseActionPerformed(evt);
            }
        });

        btnRestore.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRestore.setText("Run");
        btnRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestoreActionPerformed(evt);
            }
        });

        tblDB.setAutoCreateRowSorter(true);
        tblDB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Created", "Created by", "Description", "File path", "Last restored", "Restored by", "Restored to", "Restored as", "Database"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDB.setToolTipText("Select a backup set to be restored");
        tblDB.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        tblDB.setShowGrid(true);
        tblDB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDBMouseClicked(evt);
            }
        });
        tblDB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblDBKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblDB);
        if (tblDB.getColumnModel().getColumnCount() > 0) {
            tblDB.getColumnModel().getColumn(0).setMinWidth(30);
            tblDB.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblDB.getColumnModel().getColumn(0).setMaxWidth(100);
            tblDB.getColumnModel().getColumn(1).setMinWidth(90);
            tblDB.getColumnModel().getColumn(1).setPreferredWidth(115);
            tblDB.getColumnModel().getColumn(1).setMaxWidth(200);
            tblDB.getColumnModel().getColumn(2).setMinWidth(70);
            tblDB.getColumnModel().getColumn(2).setPreferredWidth(80);
            tblDB.getColumnModel().getColumn(2).setMaxWidth(150);
            tblDB.getColumnModel().getColumn(3).setMinWidth(150);
            tblDB.getColumnModel().getColumn(3).setPreferredWidth(200);
            tblDB.getColumnModel().getColumn(4).setMinWidth(0);
            tblDB.getColumnModel().getColumn(4).setPreferredWidth(0);
            tblDB.getColumnModel().getColumn(4).setMaxWidth(0);
            tblDB.getColumnModel().getColumn(5).setMinWidth(90);
            tblDB.getColumnModel().getColumn(5).setPreferredWidth(115);
            tblDB.getColumnModel().getColumn(5).setMaxWidth(200);
            tblDB.getColumnModel().getColumn(6).setMinWidth(0);
            tblDB.getColumnModel().getColumn(6).setPreferredWidth(0);
            tblDB.getColumnModel().getColumn(6).setMaxWidth(0);
            tblDB.getColumnModel().getColumn(7).setMinWidth(0);
            tblDB.getColumnModel().getColumn(7).setPreferredWidth(0);
            tblDB.getColumnModel().getColumn(7).setMaxWidth(0);
            tblDB.getColumnModel().getColumn(8).setMinWidth(0);
            tblDB.getColumnModel().getColumn(8).setPreferredWidth(0);
            tblDB.getColumnModel().getColumn(8).setMaxWidth(0);
            tblDB.getColumnModel().getColumn(9).setMinWidth(0);
            tblDB.getColumnModel().getColumn(9).setPreferredWidth(0);
            tblDB.getColumnModel().getColumn(9).setMaxWidth(0);
        }

        jLabel5.setText("Backup");

        txtDBId.setText("-1");
        txtDBId.setToolTipText("Selected backup ID. -1 means nothing selected.");
        txtDBId.setDisabledTextColor(java.awt.Color.blue);
        txtDBId.setEnabled(false);

        txtZipFile.setDisabledTextColor(java.awt.Color.blue);
        txtZipFile.setEnabled(false);

        jLabel6.setText("Restored by");

        txtRestoredBy.setDisabledTextColor(java.awt.Color.blue);
        txtRestoredBy.setEnabled(false);

        jLabel7.setText("Restored to");

        txtRestoredTo.setDisabledTextColor(java.awt.Color.blue);
        txtRestoredTo.setEnabled(false);

        jLabel8.setText("Restored as");

        txtRestoredAs.setDisabledTextColor(java.awt.Color.blue);
        txtRestoredAs.setEnabled(false);

        jLabel9.setText("Original DB");

        txtOriginalDatabase.setDisabledTextColor(java.awt.Color.blue);
        txtOriginalDatabase.setEnabled(false);

        btnRestoreFrom.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRestoreFrom.setText("Restore from...");
        btnRestoreFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestoreFromActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtRestoredAs, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtOriginalDatabase))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(txtRestoredBy, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtRestoredTo))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtDBId, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                                .addComponent(txtZipFile, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(70, 70, 70)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRestore, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRestoreFrom, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(chkOverrideDatabase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNewDB))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtRestoredAs, txtRestoredBy});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(txtNewDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkOverrideDatabase))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDBId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtZipFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRestore))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtRestoredBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(txtRestoredTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(txtOriginalDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(txtRestoredAs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnRestoreFrom)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Restore", jPanel2);

        ProgressBar.setToolTipText("");
        ProgressBar.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancel)
                .addGap(6, 6, 6))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1)
                    .addComponent(ProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackupActionPerformed

        // Validate data
        if (!isValidData()) {
            return;
        }

        // Get selected database
        String database = this.cboBD.getSelectedItem().toString();

        // Get selected server name
        String serverName = this.cboServer.getSelectedItem().toString();
        Connection conn = null;
        // Save configuration before starting the backup
        // No problem is configuration is not saved, but cannot continue if connection is not successful
        try {
            // Try connection before saving the configuration.
            conn = DBConnection.getConnection(
                    this.txtUser.getText(),
                    this.txtPassword.getPassword(), serverName, getSchema());
            if (conn == null) {
                String msg = """
                            Unable to connect to database.
                            Please, check user and/or password.""";
                this.backupInProgress = false;
                throw new Exception(msg);
            }

            // Save configuration
            saveConfiguration();

        } catch (Exception ex) {
            String msg = ex.getMessage() + "\nConfiguration won't be saved.";
            if (!this.standalone) {
                JOptionPane.showMessageDialog(
                        null,
                        msg,
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
            } else {
                sendMailAlert(msg, false);
                log.error(msg);
            }
        }

        this.ProgressBar.setValue(0);

        if (conn == null) {
            return;
        }

        // If connection was successful, go ahead and make the backup.
        Backup backup = new Backup();
        backup.setUser(this.txtUser.getText());
        backup.setPassword(this.txtPassword.getPassword());
        backup.setDatabase(database);
        backup.setBackupUI(this);
        this.backupInProgress = true;

        if (!this.standalone) {
            backup.start();
        } else {
            backup.createBackup();
        }

    }//GEN-LAST:event_btnBackupActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        validateAndClose();
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * Java restoration task only.
     *
     * @param evt
     */
    private void btnRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestoreActionPerformed

        if (this.txtZipFile.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "No backup is selected.\nNavigate to the grid and click on the backup you want to restore.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.tblDB.requestFocusInWindow();
            return;
        }
        // This variable contains the new name for the restoring database
        // or the original name, if user decides to override it.
        String newDatabase = this.txtNewDB.getText().trim();

        // Make sure no blank spaces are part of the name of the new database.
        if (!newDatabase.isBlank()) {
            newDatabase = newDatabase.replaceAll(" ", "_");
            this.txtNewDB.setText(newDatabase);
        }

        // Connection to the server where we are going to restore.
        Connection conn;

        // Get selected server name
        String serverName = getServerName();

        try {
            conn = DBConnection.getConnection(
                    this.txtUser.getText(),
                    this.txtPassword.getPassword(), serverName, getSchema());
        } catch (Exception ex) {
            JOptionPane.showInternalMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Cannot continue if not connected to the database.
        if (conn == null) {
            return;
        }

        if (this.chkOverrideDatabase.isSelected()) {
            String msg = "Existing database will be overriden\n Sure you wanna do that?";
            int option = JOptionPane.showConfirmDialog(null,
                    msg,
                    "WARNING", JOptionPane.YES_NO_OPTION);
            log.warn(msg);
            if (option == JOptionPane.NO_OPTION) {
                log.warn("User replied 'NO'");
                return;
            }
            log.warn("User replied 'YES'");
        }

        try {
            // Save configuration before restoring database.
            saveConfiguration();
        } catch (Exception ex) {
            Logger.getLogger(BackupUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showInternalMessageDialog(
                    null, ex.getMessage(),
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
            log.warn(ex.getMessage() + "\n Configuration not saved.");
            // No problem if not saved... continue with the restoration.
        }

        // Double check if file exists
        File sourceZipFile = new File(this.txtZipFile.getText());
        if (!sourceZipFile.exists()) {
            JOptionPane.showMessageDialog(null,
                    "I'm afraid, the backup file you selected does not exist on the disk any more.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        this.ProgressBar.setValue(0);

        Restore restore = new Restore(
                this.chkOverrideDatabase.isSelected(),
                this, conn, sourceZipFile, newDatabase);
        restore.start();
    }//GEN-LAST:event_btnRestoreActionPerformed

    private void txtPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPasswordFocusGained
        txtPassword.selectAll();
    }//GEN-LAST:event_txtPasswordFocusGained

    private void txtNewDBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNewDBFocusGained
        txtNewDB.selectAll();
    }//GEN-LAST:event_txtNewDBFocusGained

    private void chkOverrideDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkOverrideDatabaseActionPerformed
        this.txtNewDB.setEnabled(!this.chkOverrideDatabase.isSelected());
        if (this.chkOverrideDatabase.isSelected()) {
            this.txtNewDB.setText("");
        }
    }//GEN-LAST:event_chkOverrideDatabaseActionPerformed

    private void txtNewDBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNewDBKeyTyped
        // If user sets a new database name, then overriding is not an option.
        if (!this.txtNewDB.getText().trim().isEmpty()) {
            this.chkOverrideDatabase.setSelected(false);
        }
    }//GEN-LAST:event_txtNewDBKeyTyped

    private void tblDBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDBMouseClicked
        int row = tblDB.getSelectedRow();

        if (row < 0) {
            return; // User has not selected any row
        }

        // Validate if file still exists
        String zipFile = (String) tblDB.getValueAt(row, 4);
        if (!new File(zipFile).exists()) {
            String msg = "File [" + zipFile + "] does not exist.\n"
                    + "You won't be able to restore it.\n"
                    + "Make sure you did not change its name or move it to a different directory.";
            JOptionPane.showMessageDialog(null,
                    msg,
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        this.txtDBId.setText(tblDB.getValueAt(row, 0) + "");
        this.txtZipFile.setText(zipFile);
        this.txtRestoredBy.setText((String) tblDB.getValueAt(row, 6));
        this.txtRestoredTo.setText((String) tblDB.getValueAt(row, 7));
        this.txtRestoredAs.setText((String) tblDB.getValueAt(row, 8));
        this.txtOriginalDatabase.setText((String) tblDB.getValueAt(row, 9));
        this.txtNewDB.setText((String) tblDB.getValueAt(row, 9) + "_restored");
    }//GEN-LAST:event_tblDBMouseClicked

    private void tblDBKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblDBKeyReleased
        tblDBMouseClicked(null);
    }//GEN-LAST:event_tblDBKeyReleased

    private void chkCompressMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkCompressMouseClicked
        if (chkCompress.isSelected()) {
            return;
        }

        if (this.standalone) {
            return;
        }

        JOptionPane.showMessageDialog(null,
                "Uncompressed backups are temporary.",
                "WARNING",
                JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_chkCompressMouseClicked

    private void btnAddServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddServerActionPerformed
        Server dialog = new Server(new javax.swing.JFrame(), true, cboServer);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                dialog.setVisible(false);
                dialog.dispose();
            }
        });
        dialog.setVisible(true);
    }//GEN-LAST:event_btnAddServerActionPerformed

    private void cboServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboServerActionPerformed
        this.setDefaultDescription();
    }//GEN-LAST:event_cboServerActionPerformed

    private void cboBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboBDActionPerformed
        this.setDefaultDescription();
    }//GEN-LAST:event_cboBDActionPerformed

    private void btnRestoreFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestoreFromActionPerformed
        // This variable contains the new name for the restoring database.
        // By using this option user is not allowed to override original name.
        String newDatabase = this.txtNewDB.getText().trim();

        if (newDatabase.isBlank()) {
            JOptionPane.showMessageDialog(null, """
                                                Invalid database name.
                                                
                                                Please, enter a brand new database name.""",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            this.txtNewDB.requestFocusInWindow();
            return;
        }

        // Make sure no blank spaces are part of the name of the new database.
        newDatabase = newDatabase.replaceAll(" ", "_");
        this.txtNewDB.setText(newDatabase);

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        String currentDirectory = System.getProperty("user.dir");
        fileChooser.setCurrentDirectory(new File(currentDirectory));
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue != JFileChooser.APPROVE_OPTION) {
            return;
        }

        // Get the selected directory
        File selectedFile = fileChooser.getSelectedFile();

        // Connection to the server where we are going to restore.
        Connection conn;

        // Get selected server name
        String serverName = getServerName();

        try {
            conn = DBConnection.getConnection(
                    this.txtUser.getText(),
                    this.txtPassword.getPassword(), serverName, getSchema());

            // Save configuration before restoring database.
            saveConfiguration();
        } catch (Exception ex) {
            JOptionPane.showInternalMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Cannot continue if not connected to the database.
        if (conn == null) {
            return;
        }

        this.ProgressBar.setValue(0);

        Restore restore = new Restore(
                false,
                this, conn, null, newDatabase);
        restore.setRestoreFromFolder(true);
        try {
            restore.setSourceFolder(selectedFile.getCanonicalFile());
        } catch (IOException ex) {
            JOptionPane.showInternalMessageDialog(
                    null,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        restore.start();

    }//GEN-LAST:event_btnRestoreFromActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BackupUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BackupUI(false).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JButton btnAddServer;
    private javax.swing.JButton btnBackup;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnRestore;
    private javax.swing.JButton btnRestoreFrom;
    private javax.swing.JComboBox<String> cboBD;
    private javax.swing.JComboBox<String> cboServer;
    private javax.swing.JCheckBox chkCompress;
    private javax.swing.JCheckBox chkEncrypt;
    private javax.swing.JCheckBox chkOverrideDatabase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblDB;
    private javax.swing.JTextField txtBackupDescription;
    private javax.swing.JTextField txtDBId;
    private javax.swing.JTextField txtNewDB;
    private javax.swing.JTextField txtOriginalDatabase;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtRestoredAs;
    private javax.swing.JTextField txtRestoredBy;
    private javax.swing.JTextField txtRestoredTo;
    private javax.swing.JTextField txtUser;
    private javax.swing.JTextField txtZipFile;
    // End of variables declaration//GEN-END:variables

    /**
     * Set user and password according to the options the user selected, this
     * parameters are taken from the last valid user entry (saved). Last valid
     * configuration (user & password) are crypted and stored in the system
     * database.
     *
     * @author: Bosco Garita
     * @since : 2023-10-02
     */
    private void setUser() {

        // Populate the cboServer object only if it has not been pupulated previously.
        if (cboServer == null || cboServer.getItemCount() == 0) {
            try {
                Combo.populate(cboServer, true, false);
            } catch (Exception ex) {
                String msg = ex.getMessage() + "\nUnable to load servers.";
                if (!this.standalone) {
                    JOptionPane.showMessageDialog(
                            null,
                            msg,
                            "Warning",
                            JOptionPane.WARNING_MESSAGE);
                } else {
                    sendMailAlert(msg, false);
                    log.error(msg);
                }
            }
        }

        // Locate the user for the selected server
        for (ConnectionRecord cr : this.connectionRecords) {
            if (cr.getServerName().equals(cboServer.getSelectedItem().toString())) {
                this.txtUser.setText(cr.getUser());
                this.txtPassword.setText(cr.getPassword());
                break;
            }
        }
    }

    private void validateAndClose() {
        // Do not validate anything when running in standalone mode.
        if (this.standalone) {
            dispose();
            return;
        }

        String msg = "";
        boolean closeWindow = true;

        if (this.backupInProgress) {
            msg = "A backup is in progres.";
        } else if (this.restoreInProgress) {
            msg = "A restore is in progres.";
        }

        if (!msg.isBlank()) {
            msg += "\n\nIf you close this window that process will interrupted.\n\nSure you wanna do that?";
        }

        if (!msg.isBlank()) {
            closeWindow = false;
            int respuesta = JOptionPane.showConfirmDialog(BackupUI.this,
                    msg,
                    "Please, confirm.",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
            );

            if (respuesta == JOptionPane.YES_OPTION) {
                closeWindow = true;
            }
        }

        if (closeWindow) {
            dispose();
            System.exit(0);
        }
    }

    public Boolean getBackupInProgress() {
        return backupInProgress;
    }

    public void setBackupInProgress(Boolean backupInProgress) {
        this.backupInProgress = backupInProgress;
    }

    public Boolean getRestoreInProgress() {
        return restoreInProgress;
    }

    public void setRestoreInProgress(Boolean restoreInProgress) {
        this.restoreInProgress = restoreInProgress;
    }

    public JProgressBar getProgressBar() {
        return ProgressBar;
    }

    public void setProgressBar(JProgressBar ProgressBar) {
        this.ProgressBar = ProgressBar;
    }

    private void saveConfiguration() throws Exception {
        // Locate the user that is asotiated to the selected server
        ConnectionRecord connectionRecord = new ConnectionRecord();
        for (ConnectionRecord cr : this.connectionRecords) {
            if (cr.getServerName().equals(cboServer.getSelectedItem().toString())) {
                connectionRecord = cr;
                break;
            }
        }
        updateConnectionRecord(connectionRecord);
    }

    public String getBackupDescription() {
        return this.txtBackupDescription.getText().trim();
    }

    public String getNewDatabaseName() {
        return this.txtNewDB.getText().trim();
    }

    public Integer getDBId() {
        int dbId = -1;
        if (!this.txtDBId.getText().trim().isEmpty()) {
            dbId = Integer.parseInt(this.txtDBId.getText().trim());
        }
        return dbId;
    }

    public void setIsCompressed(boolean compressed) {
        this.chkCompress.setSelected(compressed);
    }

    public boolean getIsCompressed() {
        return this.chkCompress.isSelected();
    }

    public void setIsEncrypted(boolean encrypted) {
        this.chkEncrypt.setSelected(encrypted);
    }

    public boolean getIsEncrypted() {
        return this.chkEncrypt.isSelected();
    }

    /**
     * Populates the grid with backup and restore information.
     */
    public final void loadData() {
        Connection conn;
        try {
            conn = DBConnection.getBkConnection();
        } catch (ClassNotFoundException | SQLException ex) {
            String msg = ex.getMessage() + "\nBackup information will not be saved.\nloadData()";
            if (!this.standalone) {
                JOptionPane.showMessageDialog(
                        null,
                        msg,
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
            } else {
                sendMailAlert(msg, false);
                log.warn(msg);
            }
            return;
        }

        String sql = "Select * from `bk`.`backup` ";
        try (PreparedStatement ps = conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY)) {

            SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy HH:mm");

            // Get row count and set the grid zise
            ResultSet rs = ps.executeQuery();
            rs.last();
            int records = rs.getRow();
            DefaultTableModel tableModel = (DefaultTableModel) this.tblDB.getModel();
            tableModel.setRowCount(records);
            this.tblDB.setModel(tableModel);

            // Populate the grid
            int column = 0;
            int row = 0;
            rs.beforeFirst();
            while (rs.next()) {
                this.tblDB.setValueAt(rs.getInt("id"), row, column);
                column++;
                this.tblDB.setValueAt(sdf.format(rs.getTimestamp("created_on")), row, column);
                column++;
                this.tblDB.setValueAt(rs.getString("user_created"), row, column);
                column++;
                this.tblDB.setValueAt(rs.getString("description"), row, column);
                column++;
                String zipFile = rs.getString("zip_file_name");
                if (!new File(zipFile).exists() && !this.standalone) {
                    String msg = "File [" + zipFile + "] does not exist.\n"
                            + "Make sure you did not change its name or move it to a different directory.";
                    JOptionPane.showMessageDialog(null, msg, "Warning", JOptionPane.WARNING_MESSAGE);
                }
                this.tblDB.setValueAt(zipFile, row, column);
                column++;
                if (rs.getDate("restored_on") == null) {
                    this.tblDB.setValueAt(null, row, column);
                } else {
                    this.tblDB.setValueAt(sdf.format(rs.getTimestamp("restored_on")), row, column);
                }
                column++;
                this.tblDB.setValueAt(rs.getString("last_user_restored"), row, column);
                column++;
                this.tblDB.setValueAt(rs.getString("last_server_restored"), row, column);
                column++;
                this.tblDB.setValueAt(rs.getString("last_target_db_restored"), row, column);
                column++;
                this.tblDB.setValueAt(rs.getString("database"), row, column);
                column = 0;
                row++;
            }
            conn.close();
        } catch (Exception ex) {
            String msg = ex + "\n loadData()";
            if (!this.standalone) {
                JOptionPane.showMessageDialog(
                        null,
                        msg,
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                sendMailAlert(msg, false);
                log.error(msg);
            }
        }
    }

    private void setDefaultDescription() {
        Date now = GregorianCalendar.getInstance().getTime();
        SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy HH:mm");
        this.txtBackupDescription.setText(
                this.cboServer.getSelectedItem() + " (" + cboBD.getSelectedItem() + ") " + sdf.format(now));
    }

    /**
     * @throws java.sql.SQLException
     * @Author: Bosco Garita 04/01/2011. Carga un comboBox con los datos de un
     * ResultSet
     * @param combo comboBox que se llenará
     * @param rs ResultSet con los datos para llenar el combo
     * @param col número de columna (del ResultSet) que se usará en el combo
     * @param replace true=sustituye los datos del combo, false=los agrega
     * @return true=el proceso fue exitoso, false=el proceso falló Nota 1: el
     * ResultSet que reciba este método debe venir con el atributo de
     * ResultSet.TYPE_SCROLL_SENSITIVE. Nota 2: Si el parámetro replace viene en
     * true debe asegurarse de que el evento ActionPerformed o algún otro que
     * esté asociado al comboBox no se dispare durante la ejecución de este
     * método porque causará un error de Null Pointer.
     */
    private boolean fillComboBox(
            javax.swing.JComboBox combo,
            ResultSet rs,
            int col,
            boolean replace) throws SQLException {

        boolean dataLoaded = false;
        int records;

        // Asumo la columna uno como valor predeterminado
        if (col <= 0) {
            col = 1;
        } // end if

        if (rs == null || !rs.first()) {
            throw new SQLException("Empty data source");
        } // end if

        if (replace) {
            combo.removeAllItems();
        } // end if

        rs.last();
        records = rs.getRow();
        for (int i = 1; i <= records; i++) {
            rs.absolute(i);
            combo.addItem(rs.getString(col));
        } // end for

        return dataLoaded;

    } // end fillComboBox

    private void loadDatabaseNames() {

        if (this.cboServer.getSelectedIndex() < 0) {
            return;
        }
        // Get selected server name
        String serverName = this.cboServer.getSelectedItem().toString();

        String sqlSent
                = "Select  "
                + "	SCHEMA_NAME  "
                + "from information_schema.SCHEMATA "
                + "order by 1";

        PreparedStatement ps;
        ResultSet rs;

        try {
            // Create connection acording to the selected environment
            Connection conn = DBConnection.getConnection(
                    this.txtUser.getText(),
                    this.txtPassword.getPassword(), serverName, getSchema());
            ps = conn.prepareStatement(sqlSent,
                    ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = ps.executeQuery();

            fillComboBox(cboBD, rs, 1, true);
            ps.close();
        } catch (Exception ex) {
            if (!this.standalone) {
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                sendMailAlert(ex.getMessage() + "\nloadData()", false);
                log.error(ex.getMessage() + "\nloadData()");
            }
        }
    } // end loadDatabaseNames

    public String getSchema() {
        String schema = "information_schema"; // default database
        if (this.cboBD.getSelectedIndex() > 0) {
            schema = this.cboBD.getSelectedItem().toString();
        }
        return schema;
    }

    public String getServerName() {
        String serverName = "127.0.0.1"; // default server
        if (this.cboServer.getItemCount() > 0 && this.cboServer.getSelectedIndex() < 0) {
            this.cboServer.setSelectedIndex(0);
        }
        if (this.cboServer.getSelectedIndex() >= 0) {
            serverName = this.cboServer.getSelectedItem().toString();
        }
        return serverName;
    }

    public String getOriginalDatabase() {
        return this.txtOriginalDatabase.getText().trim();
    }

    private void loadConnectionRecords() {
        Encryption encryption = new Encryption();
        this.connectionRecords = new ArrayList<>();

        String sql = "Select * from bk.connection";
        try (Connection bkCon = DBConnection.getBkConnection(); PreparedStatement ps = bkCon.prepareStatement(sql,
                ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY)) {
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                ConnectionRecord cr = new ConnectionRecord();
                cr.setId(rs.getInt("id"));
                cr.setServerName(rs.getString("server_name"));
                cr.setIp(encryption.decryptText(rs.getString("ip")));
                cr.setUser(encryption.decryptText(rs.getString("user")));
                cr.setPassword(encryption.decryptText(rs.getString("password")));
                cr.setPort(encryption.decryptText(rs.getString("port")));
                cr.setDefaultSchema(encryption.decryptText(rs.getString("default_schema")));
                connectionRecords.add(cr);
            }
        } catch (Exception ex) {

            // If the application is running in interactive mode, show the alert window, else send a mail.
            if (!this.isStandalone()) {
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                sendMailAlert(ex.getMessage() + "\nloadData()", false);
                log.error(ex.getMessage() + "\nloadData()");
            }
        }
    }

    private void updateConnectionRecord(ConnectionRecord connectionRecord) throws Exception {
        Encryption encryption = new Encryption();

        String sql = "UPDATE `bk`.`connection` "
                + "	SET `server_name` = ?, "
                + "	`ip` = ?, "
                + "	`port` = ?, "
                + "	`default_schema` = ?, "
                + "     `user` = ?, "
                + "     `password` = ?"
                + "	WHERE id = ?";
        try (java.sql.Connection bkCon = DBConnection.getBkConnection(); PreparedStatement ps = bkCon.prepareStatement(sql)) {
            ps.setString(1, connectionRecord.getServerName()); // Server name is not encrypted since it is used as a unique name field.
            ps.setString(2, encryption.encryptText(connectionRecord.getIp()));
            ps.setString(3, encryption.encryptText(connectionRecord.getPort()));
            ps.setString(4, encryption.encryptText(connectionRecord.getDefaultSchema()));
            ps.setString(5, encryption.encryptText(connectionRecord.getUser()));
            ps.setString(6, encryption.encryptText(connectionRecord.getPassword()));
            ps.setInt(7, connectionRecord.getId());
            ps.executeUpdate();
        }
    }

    private boolean isValidData() {
        if (this.cboBD.getSelectedIndex() < 0) {
            String msg = "No database selected.";
            if (!this.standalone) {
                JOptionPane.showMessageDialog(null,
                        msg,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                this.cboBD.requestFocusInWindow();
            } else {
                sendMailAlert(msg, false);
            }
            return false;
        }

        if (this.backupInProgress) {
            String msg = "Only one backup can be excecuted at a time.";
            if (!this.standalone) {
                JOptionPane.showMessageDialog(null,
                        msg,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                sendMailAlert(msg, false);
            }
            return false;
        }

        // Make sure a description is in place for this backup
        if (this.txtBackupDescription.getText().isBlank()) {
            String msg = "Please, provide a description for this backup.";
            if (!this.standalone) {
                JOptionPane.showMessageDialog(
                        null,
                        msg,
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                this.txtBackupDescription.requestFocusInWindow();
            } else {
                sendMailAlert(msg, false);
            }
            return false;
        }

        // If everything is ok return true
        return true;
    }

    public boolean isStandalone() {
        return this.standalone;
    }

    public void setStandalone(boolean standalone) {
        this.standalone = standalone;
    }

    public void sendMailAlert(String message, boolean success) {

        try {
            final MailSender mailSender = new MailSender();
            FileSystem fs = FileSystems.getDefault();
            Path path = fs.getPath("bkmsg.html");
            String text = Ut.fileToString(path);
            text = text.replace("[msg]", message);
            if (!success) {
                text = text.replace("blue", "red");
            }

            //String html = "<h1>" + h1 + "</h1><h2>" + h2 + "<h2><br><p>" + message + "</p>";
            boolean sent = mailSender.sendHTMLMail("bgarita@hotmail.com", "MrB notification", text);
            if (!sent) {
                throw new Exception("Unable to send mail alerts");
            }
            
        } catch (Exception ex) {
            log.error(ex.getMessage());
        }
    }

    private void doAll() {
        /*
        1. Read values from a properties file and fill-in the required fields.
        2. Run validations.
        3. Run the backup process.
        
        Note:
        The property files used here do not contain any sensitive data. User, password,
        port and any other configuration item is taken from the database when the system
        starts.
        Here we only use server and database properties in order to set thouse values
        to set the necessary validation data.
         */

        log.setConsoleOnly(false);
        
        checkWaiting();

        // Server
        String serverPropsFile = "server.properties";

        // Databases
        String databasePropsFile = "dblist.properties";

        Properties serverProps;
        Properties dbListProps;

        try {
            serverProps = Props.getProps(new File(serverPropsFile));
            this.cboServer.setSelectedItem(serverProps.getProperty("server"));
            if (this.cboServer.getSelectedIndex() < 0) {
                String msg = "No configuration found for server [" + serverProps.getProperty("server") + "]"
                        + "Make sure " + serverPropsFile + " contains the right server name.";
                throw new Exception(msg);
            }
            this.cboServerActionPerformed(null);

            dbListProps = Props.getProps(new File(databasePropsFile));
            Enumeration<?> en = dbListProps.propertyNames();
            List<String> databases = new ArrayList<>();

            while (en.hasMoreElements()) {
                String key = (String) en.nextElement();
                String value = dbListProps.getProperty(key);
                databases.add(value);
            } // end while

            // Now lets validate the database list at the time the job is being executed.
            for (String database : databases) {
                log.info("----- Running backup for " + database + " -----");
                checkWaiting();
                this.cboBD.setSelectedItem(database);
                if (this.cboBD.getSelectedIndex() < 0) {
                    String msg = "No configuration found for database [" + database + "]"
                            + "Make sure " + databasePropsFile + " contains the right database names.";
                    throw new Exception(msg);
                }
                this.cboBDActionPerformed(null);

                this.btnBackupActionPerformed(null);
            }
        } catch (Exception ex) {
            log.error(ex.getMessage());
            sendMailAlert(ex.getMessage(), false);
        }
    }

    private void checkWaiting() {
        long waitTime = 0;
        long maxWaitTime = 1000 * 60 * 60 * 2; // 2 hours
        while (this.backupInProgress) {
            waitTime += 1000 * 15;
            try {
                if (waitTime > maxWaitTime) {
                    String msg = "Looks like a backup process is still in place.  The maximum wait time has been exceeded.";
                    throw new Exception(msg);
                }

                Thread.sleep(1000 * 15L);
            } catch (Exception ex) {
                sendMailAlert(ex.getMessage() + "\nTiemout", false);
                log.error(ex.getMessage() + "\nTiemout");
                dispose();
            }
        }
    }

    public final void setBackupLife() {
        try {
            Properties life = Props.getProps(new File("backupslife.properties"));
            String keep = life.getProperty("keep");
            String period = life.getProperty("period");

            // Convert to days (use base 360 for months).
            this.backupLife = period.equals("days") ? Integer.parseInt(keep) : Integer.parseInt(keep) * 30;
        } catch (IOException ex) {
            this.backupLife = 60 * 5; // defaults to 5 years
        }
    }

    /**
     * Get the number of days that backups are kept.
     *
     * @return int number of days.
     */
    public int getBackupLife() {
        return backupLife;
    }

    private void deleteExpiredBackups() {
        log.info("Validating backup files expiration...");
        List<Integer> ids = new ArrayList<>();
        List<String> files = new ArrayList<>();
        String sql = "SELECT id, zip_file_name from bk.backup WHERE DATEDIFF(NOW(), created_on) > ?";
        try (Connection bkCon = DBConnection.getBkConnection(); PreparedStatement ps = bkCon.prepareStatement(sql,
                ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY)) {
            ps.setInt(1, this.backupLife);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                ids.add(rs.getInt("id"));
                files.add(rs.getString("zip_file_name"));
            }
        } catch (Exception ex) {
            // If the application is running in interactive mode, show the alert window, else send a mail.
            if (!this.isStandalone()) {
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                sendMailAlert(ex.getMessage() + "\nloadData()", false);
                log.error(ex.getMessage() + "\nloadData()");
            }
        }

        sql = "Delete from bk.backup WHERE id = ?";
        File file = null;
        try (Connection bkCon = DBConnection.getBkConnection(); PreparedStatement ps = bkCon.prepareStatement(sql)) {
            for (int i = 0; i < ids.size(); i++) {
                int id = ids.get(i);
                bkCon.setAutoCommit(false); // Start transaction
                ps.setInt(1, id);
                ps.executeUpdate();

                // Delete file and check if it was successfull. If so, commit the transaction
                file = new File(files.get(i));
                boolean deleted = file.delete();

                // Commit or rollback the transaction.
                // The OR scenario takes place when the file was manually removed from the OS.
                if (deleted || !file.exists()) {
                    bkCon.commit();
                } else {
                    bkCon.rollback();
                }

                bkCon.setAutoCommit(true);
            }
            log.info(ids.size() + " expired backup files deleted.");
        } catch (Exception ex) {
            // No need to execute a rollback since it executes implicitly when 
            // the connection closes before the transaction is not commited.
            String msg
                    = "FAIL when trying to delete expired backups [" + (file != null ? file.getAbsolutePath() : "??") + "]. \n" + ex.getMessage();

            // If the application is running in interactive mode, show the alert window, else send a mail.
            if (!this.isStandalone()) {
                JOptionPane.showMessageDialog(null,
                        msg,
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                sendMailAlert(msg, false);
                log.error(msg);
            }
        }
    }
}
