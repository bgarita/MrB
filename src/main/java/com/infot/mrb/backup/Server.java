package com.infot.mrb.backup;

import com.infot.mrb.database.DBConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bgarita
 */
public class Server extends javax.swing.JDialog {

    private JComboBox<String> cboServer;

    /**
     * Creates new form Server
     *
     * @param parent
     * @param modal
     * @param cboServer
     */
    public Server(java.awt.Frame parent, boolean modal, JComboBox<String> cboServer) {
        super(parent, modal);
        this.cboServer = cboServer;
        initComponents();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblConnections = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        txtServerName = new javax.swing.JTextField();
        txtIpAddress = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        txtSchema = new javax.swing.JTextField();
        txtUser = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configure connections");
        setAlwaysOnTop(true);
        setModal(true);

        tblConnections.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Server", "IP Address", "Port", "Default Schema", "User", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblConnections);
        if (tblConnections.getColumnModel().getColumnCount() > 0) {
            tblConnections.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblConnections.getColumnModel().getColumn(0).setMaxWidth(80);
            tblConnections.getColumnModel().getColumn(3).setPreferredWidth(70);
            tblConnections.getColumnModel().getColumn(3).setMaxWidth(90);
        }

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Configure server connections");

        jLabel2.setText("Server Name");

        jLabel3.setText("IP Address");

        jLabel4.setText("Port");

        jLabel5.setText("Default Schema");

        jLabel6.setText("User");

        jLabel7.setText("Password");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        txtPort.setText("3306");

        txtSchema.setText("information_schema");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.CENTER)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(22, 22, 22)
                                                .addComponent(txtServerName, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtUser)
                                                    .addComponent(txtSchema)
                                                    .addComponent(txtPassword))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 154, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSave)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAdd)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(txtServerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtSchema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(btnSave)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // Test connection before adding it to the table
        String server = this.txtServerName.getText().trim();
        String IP = this.txtIpAddress.getText().trim();
        String port = this.txtPort.getText().trim();
        String user = this.txtUser.getText().trim();
        String password = this.txtPassword.getText().trim();
        String schema = this.txtSchema.getText().trim();

        try (Connection conn = DBConnection.getConnection(IP, port, user, password, schema)) {

            if (conn == null) {
                JOptionPane.showMessageDialog(null,
                        "Connection fail.",
                        "ERROR",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        // Valid if ip already exists to avoid data duplication
        int existingConnectionRow = this.seek(tblConnections, IP, 2);
        if (existingConnectionRow >= 0) {
            this.tblConnections.setRowSelectionInterval(existingConnectionRow, existingConnectionRow);
            JOptionPane.showMessageDialog(null,
                    "Connection already exists.",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // If connection was successful then populate the table
        int row = this.seekNull(tblConnections, 0);
        if (row < 0) {
            this.resizeTable(tblConnections, 1, "Filas");
            row = this.seekNull(tblConnections, 0);
        }

        this.tblConnections.setValueAt(-1, row, 0);
        this.tblConnections.setValueAt(server, row, 1);
        this.tblConnections.setValueAt(IP, row, 2);
        this.tblConnections.setValueAt(port, row, 3);
        this.tblConnections.setValueAt(schema, row, 4);
        this.tblConnections.setValueAt(user, row, 5);
        this.tblConnections.setValueAt(password, row, 6);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        this.setAlwaysOnTop(false);
        // Save data
        try {
            int records = this.tblConnections.getModel().getRowCount();
            for (int row = 0; row < records; row++) {
                // Skip nulls or existing records
                if (tblConnections.getValueAt(row, 0) == null || Integer.parseInt(tblConnections.getValueAt(row, 0).toString()) >= 0) {
                    continue;
                }

                // Only new records are added to the database table
                ConnectionRecord connectionRecord = new ConnectionRecord();
                connectionRecord.setServerName(tblConnections.getValueAt(row, 1).toString());
                connectionRecord.setIp(tblConnections.getValueAt(row, 2).toString());
                connectionRecord.setPort(tblConnections.getValueAt(row, 3).toString());
                connectionRecord.setDefaultSchema(tblConnections.getValueAt(row, 4).toString());
                connectionRecord.setUser(tblConnections.getValueAt(row, 5).toString());
                connectionRecord.setPassword(tblConnections.getValueAt(row, 6).toString());
                save(connectionRecord);
            }

            JOptionPane.showMessageDialog(null,
                    "Save successfully!",
                    "Save configurations",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }

        // Reload data and fill combo box
        loadData();

        this.setAlwaysOnTop(true);
    }//GEN-LAST:event_btnSaveActionPerformed


    /**
     * Este método busca dentro de una JTable la primera fila nula en la columna
     * especificada y retorna el número de fila. En caso de no existir ninguna
     * fila nula devolverá un -1.
     *
     * @param table JTable en donde se realizará la búsqueda
     * @param column int columna que será consultada
     * @return row (Fila encontrada con el valor nulo) -1 si no hay nulos.
     */
    public int seekNull(JTable table, int column) {
        if (column >= table.getColumnCount()) {
            column = 0;
        } // end if
        int row;
        for (row = 0; row < table.getRowCount(); row++) {
            if (table.getValueAt(row, column) == null) {
                break;
            } // end if
        } // end for

        // Si no hay filas nulas en la columna solicitada entonces devuelvo -1
        if (row >= table.getRowCount()) {
            row = -1;
        } // end if
        return row;
    } // end seekNull

    /**
     * Este método redefine el tamaño de una JTable. Si el número de
     * columnas/filas que reciba por parámetro es negativo entonces le restará
     * ese número al que ya tiene la tabla pero si es positivo entonces se lo
     * incrementa.
     *
     * @author Bosco Garita Azofeifa 17/11/2013
     * @param t JTable tabla cuyo tamaño será cambiado
     * @param cantidad int número de columnas o filas a agregar o restar
     * @param tipo String "Columnas", "Filas" tipo de dato a modificar
     */
    public void resizeTable(JTable t, int cantidad, String tipo) {
        DefaultTableModel dtm = (DefaultTableModel) t.getModel();
        if (tipo.equalsIgnoreCase("Filas")) {
            dtm.setRowCount(dtm.getRowCount() + cantidad);
        } else if (tipo.equalsIgnoreCase("Columnas")) {
            dtm.setColumnCount(dtm.getColumnCount() + cantidad);
        } // end if-else
        t.setModel(dtm);
    } // end resizeTable

    /**
     * Autor: Bosco Garita 13/09/2009 Devuelve el número de fila en donde se
     * encontró el valor, <br>
     * -1 si el valor no es encontrado.
     *
     * @param table JTable en donde se hará la búsqueda
     * @param valor Object valor a buscar
     * @param column int columna en donde se realizará la búsqueda
     * @return int fila en donde se encontró el valor o -1 si no se encontró
     */
    public int seek(JTable table, Object valor, int column) {
        if (valor == null) {
            return -1;
        }
        // end if

        String sValor = valor.toString().trim();
        boolean toggle = false, extend = false;
        String sCelda;
        int row;
        for (row = 0; row < table.getRowCount(); row++) {
            if (table.getValueAt(row, column) == null) {
                continue;
            }
            // end if
            sCelda = table.getValueAt(row, column).toString().trim();
            if (sCelda.equals(sValor)) {
                table.changeSelection(row, column, toggle, extend);
                break;
            } // end if
        } // end for
        if (row >= table.getRowCount()) {
            row = -1;
        }
        // end if
        return row;
    } // end seek

    /**
     * Autor: Bosco Garita 29/04/2012 Este método limpia todas las celdas de una
     * JTable.
     *
     * @param tabla
     */
    public void clearTable(JTable tabla) {
        int rowCount = tabla.getModel().getRowCount();
        int columnCount = tabla.getColumnModel().getColumnCount();

        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < columnCount; j++) {
                tabla.setValueAt(null, i, j);
            } // end for
        } // end for
    } // end clearTable

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                Server dialog = new Server(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblConnections;
    private javax.swing.JTextField txtIpAddress;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtSchema;
    private javax.swing.JTextField txtServerName;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables


    private void loadData() {
        Encryption encryption = new Encryption();
        String sql = "Select * from `bk`.`connection`";
        try (java.sql.Connection bkCon = DBConnection.getBkConnection(); PreparedStatement ps = bkCon.prepareStatement(sql, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY)) {
            ResultSet rs = ps.executeQuery();
            clearTable(tblConnections);
            int tableRows = tblConnections.getModel().getRowCount();
            while (rs != null && rs.next()) {
                if (rs.getRow() >= tableRows) {
                    resizeTable(tblConnections, 1, "Filas");
                }
                // All columns, except id, are encryped, decrypt them.
                int row = seekNull(tblConnections, 0);
                tblConnections.setValueAt(rs.getString("id"), row, 0);
                tblConnections.setValueAt(rs.getString("server_name"), row, 1);
                tblConnections.setValueAt(encryption.decryptText(rs.getString("ip")), row, 2);
                tblConnections.setValueAt(encryption.decryptText(rs.getString("port")), row, 3);
                tblConnections.setValueAt(encryption.decryptText(rs.getString("default_schema")), row, 4);
                tblConnections.setValueAt(encryption.decryptText(rs.getString("user")), row, 5);
                tblConnections.setValueAt(encryption.decryptText(rs.getString("password")), row, 6);
            }

            Combo.populate(cboServer, true, false);
        } catch (Exception ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void save(ConnectionRecord connectionRecord) throws Exception {
        Encryption encryption = new Encryption();

        String sql = "INSERT INTO `bk`.`connection` "
                + "	(`server_name`, "
                + "	`ip`, "
                + "	`port`, "
                + "	`default_schema`, "
                + "     `user`, "
                + "     `password`)"
                + "	VALUES"
                + "	(?, "
                + "	?, "
                + "	?, "
                + "	?, "
                + "     ?, "
                + "	?)";
        try (java.sql.Connection bkCon = DBConnection.getBkConnection(); PreparedStatement ps = bkCon.prepareStatement(sql)) {
            ps.setString(1, connectionRecord.getServerName()); // Server name is not encrypted since it is used as a unique name field.
            ps.setString(2, encryption.encryptText(connectionRecord.getIp()));
            ps.setString(3, encryption.encryptText(connectionRecord.getPort()));
            ps.setString(4, encryption.encryptText(connectionRecord.getDefaultSchema()));
            ps.setString(5, encryption.encryptText(connectionRecord.getUser()));
            ps.setString(6, encryption.encryptText(connectionRecord.getPassword()));
            ps.executeUpdate();
        }
    }
}
